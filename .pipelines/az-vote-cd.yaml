trigger: none

resources:
  pipelines:
  - pipeline: az-vote-ci
    source: 'Azure vote app CI'

name: $(Date:yyyyMMdd)$(Rev:.r)

variables:
  - group: az-vote-app-dev
  - name: images_artifact_path
    value: $(Pipeline.Workspace)/az-vote-ci/image_tags
  - name: manifests_artifact_path
    value: $(Pipeline.Workspace)/az-vote-ci/manifests
  # - name: utils_artifact_path
  #   value: $(Pipeline.Workspace)/az-vote-ci/utils
  - name: utils_artifact_path
    value: $(Pipeline.Workspace)/cd-utils


pool:
  vmImage: ubuntu-latest

  

stages:
  - stage: "Fetch_the_util_code_temp"
    jobs: 
    - job: "publish_artifacts"
      steps:
      - publish: $(System.DefaultWorkingDirectory)/utils
        artifact: cd-utils


  - stage: "deploy_dev"
    displayName: "Deploy to Dev"
    # variables:
    #   - group: az-vote-app-dev
    jobs:
    - deployment: "Deploy_AzureVote"
      environment: dev
      strategy:
        runOnce:
          deploy:   
            steps:  
              - task: Bash@3        
                name: "Read_Image_tags"
                displayName: "Read Image Tags"
                inputs:
                  targetType: 'inline'
                  script: |
                    for file in $(images_artifact_path)/*; do echo "##vso[task.setvariable variable=${file##*/}]$(cat $file)"; done
              - task: Bash@3        
                name: "Check_Image_tags"
                displayName: "Check Image Tags"
                inputs:
                  targetType: 'inline'
                  script: |
                    env
              - task: Bash@3        
                name: "Generate_Manifests"
                displayName: "Generate Manifests"
                inputs:
                  filePath: $(utils_artifact_path)/generate-manifests.sh
                  arguments: '$(manifests_artifact_path) gen_manifests'
              - task: Bash@3        
                name: "Check_Manifests"
                displayName: "Check Manifests"
                inputs:
                  targetType: 'inline'
                  script: |
                    ls -ltr $(Pipeline.Workspace)
                    ls -ltr gen_manifests                    
                    cat gen_manifests/gen_manifests.yaml
                    cd gen_manifests
                    pwd
              - task: Bash@3        
                name: "Create_PR"
                displayName: "Create PR"
                inputs:
                  filePath: $(utils_artifact_path)/create-pr.sh
                  arguments: '-s $(Build.SourcesDirectory)/gen_manifests -d $(MANIFESTS_FOLDER) -r $(MANIFESTS_REPO) -b $(MANIFESTS_BRANCH) -i $(Build.BuildNumber) -t $(PAT) -e $(ENVIRONMENT_NAME)'
    
    - job: waitForValidation
      displayName: Wait for Manual Testing  
      pool: server    
      timeoutInMinutes: 4320 # job times out in 3 days
      steps:   
      - task: ManualValidation@0
        timeoutInMinutes: 1440 # task times out in 1 day
        inputs:
          notifyUsers: |
            iefedore@microsoft.com
          instructions: 'Please test the deployment and resume'
          onTimeout: 'resume'
            
               
              
                            
           
              # - task: InvokeRESTAPI@1
              #   inputs:
              #     connectionType: Generic
              #     method: 'POST' # Options: OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, PATCH
              #     headers: '{Content-Type:application/json, PlanUrl: $(system.CollectionUri), ProjectId: $(system.TeamProjectId), HubName: $(system.HostType), PlanId: $(system.PlanId), JobId: $(system.JobId), TimelineId: $(system.TimelineId), TaskInstanceId: $(system.TaskInstanceId), AuthToken: $(system.AccessToken)}' 
              #     body: '{"hi":there}'
              #     #urlSuffix: # Optional
              #     #waitForCompletion: 'false' # Options: true, false
              #     #successCriteria: # Optional
           
           