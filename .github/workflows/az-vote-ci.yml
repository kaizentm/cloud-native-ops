# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  push:
    branches:
      - master

jobs:
  Build_Push_Azure_Vote_App_Image:
    name: "Build and Push Azure Vote App Image"
    runs-on: ubuntu-latest
    env:
      SRC_FOLDER: azure-vote
      AZ_ACR_NAME: gitopsflowacr
    steps:
    - name: Checkout
      uses: actions/checkout@v2.3.4
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: Create Frontend Image Tags
      env:
        SOURCE_LOCATION: src/azure-vote-front 
        DOCKER_FILE: Dockerfile
        REPOSITORY: azvote/azure-vote-front
        TASKNAME: frontend_image   
      uses: Azure/cli@1.0.4
      with:
        inlineScript:  |
          set -euxo pipefail  # fail on error
  
          # Generate an tag with a reproducible checksum of all files in . by doing a checksum of all files
          # in alphabetical order, then another checksum of their names and checksums.
          # Running this command on windows-based infrastructure may return a different result due to CRLF
          pushd $SOURCE_LOCATION
          imageTag=$(git log -n 1 --format="%H" -- ".")
          popd
  
          # If the image with the generated tag doesn't already exist, build it.
          if ! az acr repository show -n $AZ_ACR_NAME --image "$REPOSITORY:$imageTag" -o table; then
            echo No match found. Container will be built.
            echo Tag for new container: $imageTag
            az acr build \
              -r $AZ_ACR_NAME \
              -t "$REPOSITORY:$imageTag" \
              -t "$REPOSITORY:latest" \
              -f "$GITHUB_WORKSPACE/$SRC_FOLDER/$SOURCE_LOCATION/$DOCKER_FILE" \
              $GITHUB_WORKSPACE/$SRC_FOLDER/$SOURCE_LOCATION
          else
            echo "The existing image with tag "$imageTag" is found."
          fi
          set +x
          echo "setting IMAGE_TAG output for task $TASKNAME"
          echo "##vso[task.setvariable variable=IMAGE_TAG;isOutput=true]$imageTag"

          # write a file containing the image tag
          mkdir -p $GITHUB_WORKSPACE/image_tags      
          echo "$imageTag" > $GITHUB_WORKSPACE/image_tags/$TASKNAME
