trigger: none

resources:
  pipelines:
  - pipeline: az-vote-ci
    source: 'Azure vote app CI'

name: $(Date:yyyyMMdd)$(Rev:.r)

variables:
  - group: az-vote-app-dev
  - name: images_artifact_path
    value: $(Pipeline.Workspace)/az-vote-ci/image_tags
  - name: manifests_artifact_path
    value: $(Pipeline.Workspace)/az-vote-ci/manifests
  - name: utils_artifact_path
    value: $(Pipeline.Workspace)/az-vote-ci/utils
  # - name: utils_artifact_path
  #   value: $(Pipeline.Workspace)/cd-utils


pool:
  vmImage: ubuntu-latest

  

stages:
  # - stage: "Fetch_the_util_code_temp"
  #   jobs: 
  #   - job: "publish_artifacts"
  #     steps:
  #     - publish: $(System.DefaultWorkingDirectory)/utils
  #       artifact: cd-utils


  - stage: "deploy_dev"
    displayName: "Deploy to Dev"    
    jobs:
    - job: deploy_with_gitops
      displayName: Wait for changes to be applied
      pool: server          
      steps:   
      - task: InvokeRESTAPI@1
        inputs:
          connectionType: connectedServiceName # Options: connectedServiceName, connectedServiceNameARM
          serviceConnection: azdo-gitops-events # Required when connectionType == ConnectedServiceName
          #azureServiceConnection: # Required when connectionType == ConnectedServiceNameARM
          method: 'GET' # Options: OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, PATCH
          #headers: '{Content-Type:application/json, PlanUrl: $(system.CollectionUri), ProjectId: $(system.TeamProjectId), HubName: $(system.HostType), PlanId: $(system.PlanId), JobId: $(system.JobId), TimelineId: $(system.TimelineId), TaskInstanceId: $(system.TaskInstanceId), AuthToken: $(system.AccessToken)}' 
          #body: # Required when method != GET && Method != HEAD
          #urlSuffix: # Optional
          #waitForCompletion: 'false' # Options: true, false
          completionEvent: 'Callback'
          #successCriteria: # Optional

  #   - deployment: "Deploy_to_dev"
  #     environment: dev
  #     strategy:
  #       runOnce:
  #         deploy:   
  #           steps:  
  #           - template: deployment-template.yaml                      

  #   # Temporary Manual Testing
  #   # Will be changed to auto deployment state detection  
  #   - job: waitForValidation
  #     displayName: Wait for PR to be merged  
  #     pool: server          
  #     dependsOn: Deploy_to_dev
  #     steps:   
  #     - task: ManualValidation@0
  #       timeoutInMinutes: 1440 # task times out in 1 day
  #       inputs:
  #         notifyUsers: |
  #           iefedore@microsoft.com
  #         instructions: 'Please merge the PR, make sure the deployment is healthy and resume or reject. '
  #         onTimeout: 'resume'

  #   - job: "Automated_testing"
  #     displayName: Automated testing 
  #     dependsOn: waitForValidation
  #     steps:
  #     - task: Bash@3        
  #       name: "smoke_test"
  #       displayName: "Smoke Test"
  #       inputs:
  #         targetType: 'inline'
  #         script: |
  #           echo "Place for a smoke test"
            
  # - stage: "deploy_stage"
  #   displayName: "Deploy to Stage"
  #   variables:
  #     - group: az-vote-app-stage
  #   jobs:
  #   - deployment: "Deploy_to_stage"
  #     environment: stage
  #     strategy:
  #       runOnce:
  #         deploy:   
  #           steps:  
  #           - template: deployment-template.yaml                      
            
  #   # Temporary Manual Testing
  #   # Will be changed to auto deployment state detection  
  #   - job: waitForValidation
  #     displayName: Wait for PR to be merged  
  #     pool: server          
  #     dependsOn: Deploy_to_stage
  #     steps:   
  #     - task: ManualValidation@0
  #       timeoutInMinutes: 1440 # task times out in 1 day
  #       inputs:
  #         notifyUsers: |
  #           iefedore@microsoft.com
  #         instructions: 'Please merge the PR, make sure the deployment is healthy and resume or reject. '
  #         onTimeout: 'resume'

  #   - job: "Automated_testing"
  #     displayName: Automated testing 
  #     dependsOn: waitForValidation
  #     steps:
  #     - task: Bash@3        
  #       name: "smoke_test"
  #       displayName: "Smoke Test"
  #       inputs:
  #         targetType: 'inline'
  #         script: |
  #           echo "Place for a smoke test"               
              
                     
           